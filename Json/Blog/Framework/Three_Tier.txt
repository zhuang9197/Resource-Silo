#d
    三层架构
@d

#a-1
@a
#2
概述
@2

#p
三层架构，顾名思义就是将业务或项目主要逻辑分为三层处理。
目前主流的三层架构是 界面层(UI)、业务逻辑层(BLL)、数据访问层(DAL)除此之外，通常还带有一层Entity或Model类来存储业务实体。
三层之间的关系为 UI层为呈现端，通过特定方式请求 BLL层 实现UI层与DAL层解耦，但其他两两之间紧密关联。
三层架构间，一条完整的请求为 UI —> BLL —> DAL —> BLL —> UI
@p

#a-2
@a
#2
UI层
@2
#p
UI层为三层架构的最上层，是用户操作的主体，B/S中一般为HTML和JS文件，C/S中则是客户端呈现的空间，如WPF的XAML。
@p

#a-3
@a
#2
BLL层
@2
#p
BLL层位于三层架构的中间层，让UI层与DAL实现解耦，但自己又与两层紧密关联。
做主要的逻辑判断和UI层不写的验证。
如在一次'增'中封装对是否重复的判断。
也包括在数据的加密解密。
@p

#a-4
@a
#2
DAL层
@2
#p
DAL层位于三层架构的最下层，若无导入三方库，对应的通常是ADO.Net的封装。
该层直接作用于数据的持久化，说白了就是CRUD的直接操作。
@p


三层架构业务逻辑清晰明了，适用于小型的单系统项目或类库。


#a-5
@a
#2
优缺点
@2
#p
优点：
高内聚、低耦合。
业务逻辑清晰明了，便于维护。

缺点：
规范的三层架构是一层UI层对应一层BLL层对应一层DAL层。
原本直接操作数据的代码要额外增加BLL层，增加代码量。
@p