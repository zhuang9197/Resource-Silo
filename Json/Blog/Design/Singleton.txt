#d
单例模式 
@d

#a-1
@a
#2
什么是单例模式 
@2

#p
单例模式可以简单理解为整个项目中仅有一个对象实例，这就意味着要么设计构造函数使得在多次实例化类时返回同一个对象，要么将构造函数设为(private),只能通过单例类提供的静态方法得到唯一对象。 
通常会采用第二种方式，因为第一种不符合正常逻辑。 
@p

#a-2
@a
#2
根据自己的理解创建第一个单例模式 
@2
#p
根据单例模式的描述，我们根据自己的理解尝试创建一个单例模式。 
首先，将构造函数设为private 
%d
#r
$c-cs   
class Singleton{
    private Singleton() {}
}
@c
@r
@d
现在，当我们尝试在Main中实例类时，例如 
Singleton singleton = new Singleton();
编译器将给出这个错误:CS0122	“Singleton.Singleton()”不可访问，因为它具有一定的保护级别。 
报错了，但这是个正确的错误。 
我们无法显示实例化Singleton这个类，那么就需要一个静态方法，来生成或者是提供需要的对象。 
单例模式需要一个静态且唯一的对象，： 
%d
#r
$c-cs
public class Singleton
{
    private Singleton() => Console.WriteLine("调用了一次构造函数");
    private static Singleton _singleton = new Singleton();

    public static Singleton Instance() => _singleton;

    public static void Foo()
    {
        Console.WriteLine("调用了一次我，但是什么都没有发生。");
        if (_singleton != null)
        {
            Console.WriteLine("有一个_singleton");
        }
    }
}

@c
@r
@d
同理，也可以采用静态构造函数来实现。
%d
#r
$c-cs
class Singleton
{
    private Singleton() => Console.WriteLine("调用了一次构造函数");
    private static Singleton _singleton;

    static Singleton() { _singleton = new Singleton(); }

    public static void Foo()
    {
        Console.WriteLine("调用了一次我，但是什么都没有发生。");
        if (_singleton != null)
        {
            Console.WriteLine("有一个_singleton");
        }
    }
}
@c
@r
@d

到这一步，单例类就实现了，不用惊讶，单例模式就是这么简单。 
观察上面的代码，不难发现只要我们使用到类Singleton时，就会产生一个_singleton，无论我们是否需要这个对象。 
例如我们调用Main中调用 Foo这个方法,会发现就算我们并不需要这个Singleton,编译器还是为我们实例化了这一个对象。 
这种设计模式被称为饿汉式的单例模式，有饿汉式，但是并没有饱汉式，与其对应的称之为懒汉式单例模式。 


#a-3
@a
#2
懒汉单例模式
@2
#p
懒汉单例模式，是指在单例模式的基础上，将对象的实例化设计成仅当程序需要时才生成这个对象。 
首先，我们同样需要私有化构造函数，以及不进行初始化的静态对象，并提供一个静态方法来在需要时进行唯一一次实例化和返回对象。
%d
#r
$c-cs
class Singleton
{
    private Singleton() => Console.WriteLine("调用了一次构造函数");
    private static Singleton _singleton;

    public static Singleton Instance(){
        if(_singleton == null)
        {
            _singleton = new Singleton();
        }

        return _singleton;
    } 

    public static void Foo()
    {
        Console.WriteLine("调用了一次我，但是什么都没有发生。");
        if (_singleton != null)
        {
            Console.WriteLine("有一个_singleton");
        }
    }
}
@c
@r
@d
这段代码看似没什么问题，但是当程序高并发的初始化该对象时，便会出现一个极为致命的错误。 
倘若程序以这种形式初始化对象时： 
%d
#r
$c-cs
for(int i=0;i<100;i++)
{
     Task.Run(() =>
    {
        Singleton singleton = Singleton.Instance();
    });
}
@c
@r
@d
运行完代码发现控制台不止打印了一遍“调用了构造函数”，具体次数与电脑性能有关。 
原因可以简单理解为：多线程是对cpu进行切片执行，每个线程被分到的执行时间有限，如果在这段时间内线程未执行完，这段线程将被TCB保留，等到切换至该线程再继续执行。 
这就意味着，当某个线程执行完if判断，但是尚未执行初始化，而接下来的线程进行if判断时_singleton仍是null状态，就会导致创建了多个对象。 
这种情况是十分致命的，如果连一致性都无法保证，这种单例模式就没有存在的意义。 
关于这个问题，本文提出三个不同的解决方案。  

第一，双if加锁
%d
#r
$c-cs
class Singleton
{
    private Singleton() => Console.WriteLine("调用了一次构造函数");
    private static Singleton _singleton;
    private static object _lock = new object();

    public static Singleton Instance(){
        if(_singleton == null)
        {
            lock(_lock){
                if(_singleton == null)
                {
                    _singleton = new Singleton();
                }
            }
            
        }
       

        return _singleton;
    } 

    public static void Foo()
    {
        Console.WriteLine("调用了一次我，但是什么都没有发生。");
        if (_singleton != null)
        {
            Console.WriteLine("有一个_singleton");
        }
    }
}
@c
@r
@d
第二种，借助饿汉模式的思想 

%d
#r
$c-cs
class Singleton
{
    private Singleton() => Console.WriteLine("调用了一次构造函数");
    private class handle(){
        public static Singleton _singleton = new _singleton(); 
    }

    public static Singleton Instance(){
        
       

        return handle._singleton;
    } 

    public static void Foo()
    {
        Console.WriteLine("调用了一次我，但是什么都没有发生。");
        if (_singleton != null)
        {
            Console.WriteLine("有一个_singleton");
        }
    }
}
@c
@r
@d
虽然就嵌套类handle本身来说是属于饿汉式，但是我们直接使用的Singleton却是懒汉式，属于是间接实现了懒汉式单例模式。 
@p
@p

#a-4
@a
#2
总结
@2
#p
单例模式（Singleton Pattern）是一种创建型设计模式，用于确保一个类只有一个实例，并提供一个全局访问点来访问该实例。 

在单例模式中，类自身负责创建自己的唯一实例，并确保该实例只能被访问一次。这意味着无论在何处调用该类的实例化方法，都将返回同一个实例，而不会创建新的实例。 

单例模式通常适用于以下情况： 

当一个类只需要一个实例来协调操作时，例如线程池、缓存、日志记录器等。 
当某个类的实例需要被频繁访问，但创建和销毁实例的成本较高时，可以通过单例模式来节省资源。 
懒汉式（Lazy initialization）和饿汉式（Eager initialization）是两种常见的单例模式实现方式，它们的区别在于实例化的时机。 

懒汉式： 
懒汉式是指在需要使用实例时才进行实例化。在懒汉式中，单例对象的实例在第一次被调用时创建，并且在整个应用程序的生命周期内只创建一次。懒汉式的特点是延迟加载，即在需要时才创建实例。 
懒汉式的优点是节省了系统资源，只有在需要时才会创建实例。然而，懒汉式在多线程环境下需要考虑线程安全性，需要使用同步机制（如 synchronized 关键字）来保证只有一个线程能够创建实例。 

饿汉式： 
饿汉式是指在类加载时就进行实例化。在饿汉式中，单例对象的实例在类加载时就被创建，并且在整个应用程序的生命周期内都存在。 
饿汉式的优点是实现简单，线程安全，不需要考虑同步问题。由于实例在类加载时就已经创建好了，因此不存在多线程环境下的竞争问题。 

饿汉式的缺点是可能会浪费系统资源，因为无论是否使用该实例，它都会被创建。 
 
总结： 
懒汉式适用于资源敏感的情况，只在需要时才创建实例，但需要考虑线程安全性。饿汉式适用于资源消耗较小的情况，实例在类加载时就被创建，不存在线程安全问题，但可能会浪费系统资源。 

需要根据具体的应用场景和需求选择适合的单例模式实现方式。 
@p





